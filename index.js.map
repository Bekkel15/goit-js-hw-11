{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from \"axios\";\naxios.defaults.baseURL = 'https://pixabay.com/api/';\nconst myApiKey = `49705532-1e2ede49dc369f58ee6a018a1`;\nconst axiosOptions = key => {\n    const params = {\n    params: {\n        key: myApiKey,\n        q: key,\n        image_type: `photo`,\n        orientation: `horizontal`,\n        safesearch: true,\n        per_page: 40,\n    },\n    };\n    return params;\n} \nexport function apiRequest(requestKey) {\n    return new Promise((resolve, reject) => {\n        axios\n        .get('', axiosOptions(requestKey))\n        .then(response => {\n            if (response.data.total !== 0) {\n                resolve(response.data.hits);\n                return;\n            } else{\n                reject(\n                    `Sorry, there are no images matching your ${requestKey}. Please try again!`\n                );\n                return;\n            }\n        })\n        .catch(response => {\n            reject(response.massage);\n        });\n    });\n} ","import SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst simpleGallery = new Simplelightbox('.item a',{\n    captions: true,\n    captionsData: 'alt',\n    captionsDelay: 1000,\n});\n\n\nexport function renderRequest(arr, link) {\n    const markup = arr\n      .map(\n        ({\n          largeImageURL,\n          webformatURL,\n          tags,\n          likes,\n          views,\n          comments,\n          downloads,\n        }) => {\n          return `\n      <li class= \"item\">\n        <a href=\"${largeImageURL}\">\n          <img class= \"item-img\" src=\"${webformatURL}\" alt=\"${tags}\" />\n          <div class = \"item-descrp\">\n            <table>\n              <tr>\n                <th>Likes</th>\n                <th>Views</th>\n                <th>Comment</th>\n                <th>Downloads</th>\n              </tr>\n              <tr>\n                <td>${likes}</td>\n                <td>${views}</td>\n                <td>${comments}</td>\n                <td>${downloads}</td>\n              </tr>\n            </table>\n          </div>\n        </a>\n      </li>\n      `;\n        }\n      )\n      .join('');link.insertAdjacentHTML('beforeend', markup);\n      const images = document.querySelectorAll('.item-img');\n      images.forEach(img => (img.onload = () => img.classList.add('loaded')));\n      simpleGallery.refresh();\n    }\n    \n    export function clearGallery() {\n      const gallery = document.querySelector('.gallery');\n      if (gallery) {\n        gallery.replaceChildren();\n      }\n    }","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport { apiRequest } from './js/pixabay-api';\nimport { clearGallery, renderRequest } from './js/render-functions';\nconst userForm = document.querySelector('.form');\nconst gallery = document.querySelector('.gallery');\n\nconst elemLoader = document.querySelector('.loader');\nfunction startLoader() {\n  elemLoader.classList.add('active');\n}\nfunction stopLoader() {\n  elemLoader.classList.remove('active');\n}\n\nconst formReset = () => userForm.reset();\n\nuserForm.addEventListener('submit', event => {\n  event.preventDefault();\n  clearGallery();\n  const userRequest = userForm\n    .querySelector('[name=\"search-text\"]')\n    .value.trim();\n  if (userRequest !== '') {\n    startLoader();\n    apiRequest(userRequest)\n      .then(response => {\n        renderRequest(response, gallery);\n      })\n      .catch(error => {\n        iziToast.error({ message: error, position: 'center', timeout: 2000 });\n      })\n      .finally(() => {\n        stopLoader();\n        formReset();\n      });\n  } else {\n    iziToast.warning({\n      message: 'Field must not be empty!',\n      position: 'center',\n      timeout: 2000,\n    });\n    formReset();\n    return;\n  }\n});"],"names":["axios","myApiKey","axiosOptions","key","apiRequest","requestKey","resolve","reject","response","simpleGallery","renderRequest","arr","link","markup","largeImageURL","webformatURL","tags","likes","views","comments","downloads","img","clearGallery","gallery","userForm","elemLoader","startLoader","stopLoader","formReset","event","userRequest","error","iziToast"],"mappings":"6vBACAA,EAAM,SAAS,QAAU,2BACzB,MAAMC,EAAW,qCACXC,EAAeC,IACF,CACf,OAAQ,CACJ,IAAKF,EACL,EAAGE,EACH,WAAY,QACZ,YAAa,aACb,WAAY,GACZ,SAAU,EACb,CACL,GAGO,SAASC,EAAWC,EAAY,CACnC,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACpCP,EACC,IAAI,GAAIE,EAAaG,CAAU,CAAC,EAChC,KAAKG,GAAY,CACd,GAAIA,EAAS,KAAK,QAAU,EAAG,CAC3BF,EAAQE,EAAS,KAAK,IAAI,EAC1B,MAChB,KAAkB,CACFD,EACI,4CAA4CF,CAAU,qBAC1E,EACgB,MACH,CACb,CAAS,EACA,MAAMG,GAAY,CACfD,EAAOC,EAAS,OAAO,CACnC,CAAS,CACT,CAAK,CACL,CChCA,MAAMC,EAAgB,IAAI,eAAe,UAAU,CAC/C,SAAU,GACV,aAAc,MACd,cAAe,GACnB,CAAC,EAGM,SAASC,EAAcC,EAAKC,EAAM,CACrC,MAAMC,EAASF,EACZ,IACC,CAAC,CACC,cAAAG,EACA,aAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACV,IACiB;AAAA;AAAA,mBAEEN,CAAa;AAAA,wCACQC,CAAY,UAAUC,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAU5CC,CAAK;AAAA,sBACLC,CAAK;AAAA,sBACLC,CAAQ;AAAA,sBACRC,CAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQxB,EACA,KAAK,EAAE,EAAER,EAAK,mBAAmB,YAAaC,CAAM,EACtC,SAAS,iBAAiB,WAAW,EAC7C,QAAQQ,GAAQA,EAAI,OAAS,IAAMA,EAAI,UAAU,IAAI,QAAQ,CAAE,EACtEZ,EAAc,QAAO,CACtB,CAEM,SAASa,GAAe,CAC7B,MAAMC,EAAU,SAAS,cAAc,UAAU,EAC7CA,GACFA,EAAQ,gBAAe,CAE/B,CCtDA,MAAMC,EAAW,SAAS,cAAc,OAAO,EACzCD,EAAU,SAAS,cAAc,UAAU,EAE3CE,EAAa,SAAS,cAAc,SAAS,EACnD,SAASC,GAAc,CACrBD,EAAW,UAAU,IAAI,QAAQ,CACnC,CACA,SAASE,GAAa,CACpBF,EAAW,UAAU,OAAO,QAAQ,CACtC,CAEA,MAAMG,EAAY,IAAMJ,EAAS,QAEjCA,EAAS,iBAAiB,SAAUK,GAAS,CAC3CA,EAAM,eAAc,EACpBP,IACA,MAAMQ,EAAcN,EACjB,cAAc,sBAAsB,EACpC,MAAM,KAAI,EACb,GAAIM,IAAgB,GAClBJ,IACAtB,EAAW0B,CAAW,EACnB,KAAKtB,GAAY,CAChBE,EAAcF,EAAUe,CAAO,CACvC,CAAO,EACA,MAAMQ,GAAS,CACdC,EAAS,MAAM,CAAE,QAASD,EAAO,SAAU,SAAU,QAAS,GAAI,CAAE,CAC5E,CAAO,EACA,QAAQ,IAAM,CACbJ,IACAC,GACR,CAAO,MACE,CACLI,EAAS,QAAQ,CACf,QAAS,2BACT,SAAU,SACV,QAAS,GACf,CAAK,EACDJ,IACA,MACD,CACH,CAAC"}